/// 基本交換法(バブルソート・隣接交換法)
fn main() {
    // sortしたい元の配列(ベクタ)
    let mut v = vec![4, 1, 3, 2];

    // loopで使用する元の配列(ベクタ)の長さを変数にする
    let mut i = v.len();

    // 元の配列の長さを2より小さくなるまで-1して繰り返す
    loop {
        // 2より小さいか判定
        if i < 2 {break;}

        // ネストされたloop用のインデックス変数
        let mut j = 0;
        // ネストしたloopのインデックス変数より1少ない回数繰り返す
        loop {
            // ネストしたloop中のインデックス変数が同じか判定
            if i - 1 == j {break;}
            // 隣り合う要素を比較する
            if v[j] > v[j + 1] {
                // 隣り合う要素を交換する
                v.swap(j, j+1);
            }
            j += 1;
        }
        i -= 1;
    }

    // sort結果をコンソール出力
    println!("{:?}", v);
}
